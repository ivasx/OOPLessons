import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;




public class Main {
   public static void main(String[] args) {
       Scanner scan = new Scanner(System.in);
       ArrayList<Form> forms = new ArrayList<>();


       forms.add(new Form("–Ü–≤–∞—Å", 2007, "–ì—Ä–∞ –Ω–∞ –ø—ñ–∞–Ω—ñ–Ω–æ", 10, "–ó–∞–∫—ñ–Ω—á–∏–≤ –º—É–∑–∏—á–Ω—É —à–∫–æ–ª—É", false, 2500));
       forms.add(new Form("–ú–∞—Ä—ñ—á–∫–∞", 2006, "–ú–∞–ª—é–≤–∞–Ω–Ω—è", 8, "–•–æ–¥–∏—Ç—å –Ω–∞ –≥—É—Ä—Ç–æ–∫ –æ–±—Ä–∞–∑–æ—Ç–≤–æ—Ä—á–æ–≥–æ –º–∏—Å—Ç–µ—Ü—Ç–≤–∞", true, 2300));
       forms.add(new Form("–û—Å—Ç–∞–ø", 2005, "–§—É—Ç–±–æ–ª", 9, "–ì—Ä–∞–≤ —É —à–∫—ñ–ª—å–Ω—ñ–π –∫–æ–º–∞–Ω–¥—ñ", false, 2100));
       forms.add(new Form("–°–æ—Ñ—ñ—è", 2008, "–¢–∞–Ω—Ü—ñ", 7, "–ë—Ä–∞–ª–∞ —É—á–∞—Å—Ç—å —É –∫–æ–Ω–∫—É—Ä—Å–∞—Ö", true, 2400));
       forms.add(new Form("–ë–æ–≥–¥–∞–Ω", 2007, "–ü–ª–∞–≤–∞–Ω–Ω—è", 10, "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –∑–º–∞–≥–∞–Ω—å —Ä–∞–π–æ–Ω—É", false, 2600));
       forms.add(new Form("–ö–∞—Ç–µ—Ä–∏–Ω–∞", 2009, "–®–∞—Ö–∏", 6, "–ú–∞—î –≥—Ä–∞–º–æ—Ç–∏", true, 2000));
       forms.add(new Form("–ê–Ω–¥—Ä—ñ–π", 2006, "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", 10, "–í–∏–≤—á–∞—î Java —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ", false, 2700));
       forms.add(new Form("–û–ª–µ–Ω–∞", 2005, "–ü–∏—Å–∞–Ω–Ω—è –≤—ñ—Ä—à—ñ–≤", 9, "–î—Ä—É–∫—É–≤–∞–ª–∞—Å—å —É —à–∫—ñ–ª—å–Ω—ñ–π –≥–∞–∑–µ—Ç—ñ", true, 2200));
       forms.add(new Form("–î–º–∏—Ç—Ä–æ", 2008, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", 7, "–ì—Ä–∞—î –∑–∞ —é–Ω–∞—Ü—å–∫—É –∫–æ–º–∞–Ω–¥—É", false, 2150));
       forms.add(new Form("–Ü—Ä–∏–Ω–∞", 2007, "–°–ø—ñ–≤–∏", 8, "–ó–∞–∫—ñ–Ω—á–∏–ª–∞ –≤–æ–∫–∞–ª—å–Ω–∏–π –≥—É—Ä—Ç–æ–∫", true, 2550));
       forms.add(new Form("–¢–∞—Ä–∞—Å", 2006, "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞", 10, "–ë—Ä–∞–≤ —É—á–∞—Å—Ç—å —É –≤—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö", false, 2900));


       FormAnalytics formAnalytics = new FormAnalytics(forms);


       formAnalytics.printForms(forms);
       formAnalytics.sortAge(forms);
       System.out.println("–ê–Ω–∫–µ—Ç–∏ –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –≤—ñ–∫—É:");
       formAnalytics.printForms(forms);
       formAnalytics.sortName(forms);
       System.out.println("–ê–Ω–∫–µ—Ç–∏ –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–º–µ–Ω—ñ:");
       formAnalytics.printForms(forms);
       formAnalytics.calculateAverageSalary(forms);
       formAnalytics.calculateAverageAge();
       formAnalytics.countMarriedPeople(forms);
       formAnalytics.quantityForms();
       formAnalytics.countFormsByYear(2007);
       formAnalytics.peopleWithSalaryAboveAverage();
       formAnalytics.topHobbies();
       formAnalytics.sortHobbiesByLength();
       formAnalytics.topHobbiesByMaritalStatus();
   }
}


class Form {
   private String name;
   private int birthYear;
   private String hobby;
   private int hobbyDuration;
   private String hobbyAchievements;
   private boolean isMarried;
   private double salary;




   Form(String name, int birthYear, String hobby, int hobbyDuration, String hobbyAchievements, boolean isMarried, double salary) {
       this.name = name;
       this.birthYear = birthYear;
       this.hobby = hobby;
       this.hobbyDuration = hobbyDuration;
       this.hobbyAchievements = hobbyAchievements;
       this.isMarried = isMarried;
       this.salary = salary;
   }


   public String getName() { return name; }
   public int getBirthYear() { return birthYear; }
   public String getHobby() { return hobby; }
   public int getHobbyDuration() { return hobbyDuration; }
   public String getHobbyAchievements() { return hobbyAchievements; }
   public boolean getIsMarried() { return isMarried; }
   public double getSalary() { return salary; }
   public int getAge() { return 2025 - birthYear; }


   public void aboutMyself() {
       System.out.println("==============================================================");
       System.out.println(" –Ü–º'—è          : " + name);
       System.out.println(" –í—ñ–∫           : " + getAge() + " —Ä–æ–∫—ñ–≤");
       System.out.println(" –†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: " + birthYear);
       System.out.println(" –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è    : " + hobby + " (" + hobbyDuration + " —Ä–æ–∫—ñ–≤)");
       System.out.println(" –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è    : " + hobbyAchievements);
       System.out.println(" –û–¥—Ä—É–∂–µ–Ω–∏–π(-–Ω–∞): " + (isMarried ? "üíç –¢–∞–∫" : "‚ùå –ù—ñ"));
       System.out.println(" –ó–∞—Ä–ø–ª–∞—Ç–∞      : " + salary + " –≥—Ä–Ω");
       System.out.println("==============================================================");
   }


}


class FormAnalytics {
   private ArrayList<Form> forms;


   FormAnalytics(ArrayList<Form> forms) {
       this.forms = forms;
   }


    void printForms(ArrayList<Form> forms){
       for (Form form : forms) {
           form.aboutMyself();
       }
   }


   void sortAge(ArrayList<Form> forms) {
       forms.sort(Comparator.comparingInt(Form::getAge));
   }


   void sortName(ArrayList<Form> forms) {
       forms.sort(Comparator.comparing(Form::getName));
   }


   void calculateAverageSalary(ArrayList<Form> forms) {
       double totalSalary = 0;
       for (Form form : forms) {
           totalSalary += form.getSalary();
       }
       System.out.println("–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: " + totalSalary / forms.size());
   }


   void countMarriedPeople(ArrayList<Form> forms) {
       int count = 0;
       for (Form form : forms) {
           if (form.getIsMarried()) {
               count++;
           }
       }
       System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ª—é–¥–µ–π: " + count);
   }


   void quantityForms(){System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–∫–µ—Ç: " + forms.size());}


   void countFormsByYear(int year) {
       int count = 0;
       for (Form form : forms) {
           if (form.getBirthYear() == year) {
               count++;
           }
       }
       System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–∫–µ—Ç –ª—é–¥–µ–π, –Ω–∞—Ä–æ–¥–∂–µ–Ω–∏—Ö —É " + year + " —Ä–æ—Ü—ñ: " + count);
   }


   void calculateAverageAge() {
       int totalAge = 0;
       for (Form form : forms) {
           totalAge += form.getAge();
       }
       double averageAge = (double) totalAge / forms.size();
       System.out.println("–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫ –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Ñ–æ—Ä–º: " + averageAge);
   }


   void peopleWithSalaryAboveAverage() {
       double totalSalary = 0;
       for (Form form : forms) {
           totalSalary += form.getSalary();
       }


       double averageSalary = totalSalary / forms.size();
       double threshold = averageSalary * 1.1;


       System.out.println("–õ—é–¥–∏ –∑ –ó–ü –±—ñ–ª—å—à–µ –Ω–∞ 10% –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ—ó:");
       for (Form form : forms) {
           if (form.getSalary() > threshold) {
               System.out.println(form.getName());
           }
       }
   }


   void topHobbies() {
       HashMap<String, Integer> hobbyCounts = new HashMap<>();


       for (Form form : forms) {
           String hobby = form.getHobby();
           if (hobbyCounts.containsKey(hobby)) {
               hobbyCounts.put(hobby, hobbyCounts.get(hobby) + 1);
           } else {
               hobbyCounts.put(hobby, 1);
           }
       }


       ArrayList<HashMap.Entry<String, Integer>> sortedList = new ArrayList<>(hobbyCounts.entrySet());


       for (int i = 0; i < sortedList.size() - 1; i++) {
           for (int j = i + 1; j < sortedList.size(); j++) {
               if (sortedList.get(i).getValue() < sortedList.get(j).getValue()) {
                   HashMap.Entry<String, Integer> temp = sortedList.get(i);
                   sortedList.set(i, sortedList.get(j));
                   sortedList.set(j, temp);
               }
           }
       }


       System.out.println("–¢–æ–ø 3 –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è:");
       for (int i = 0; i < Math.min(3, sortedList.size()); i++) {
           HashMap.Entry<String, Integer> entry = sortedList.get(i);
           System.out.println(entry.getKey() + " - " + entry.getValue());
       }
   }


   void sortHobbiesByLength() {
       forms.sort(Comparator.comparing((Form::getHobbyDuration)).reversed());
       System.out.println("–ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é:");
       for (Form form : forms) {
           System.out.println(form.getHobby() + " - " + form.getHobbyDuration() + " —Ä–æ–∫—ñ–≤");
       }
   }


   void topHobbiesByMaritalStatus() {
       HashMap<String, Integer> marriedHobbies = new HashMap<>();
       HashMap<String, Integer> unmarriedHobbies = new HashMap<>();


       for (Form form : forms) {
           String hobby = form.getHobby();
           if (form.getIsMarried()) {
               marriedHobbies.put(hobby, marriedHobbies.getOrDefault(hobby, 0) + 1);
           } else {
               unmarriedHobbies.put(hobby, unmarriedHobbies.getOrDefault(hobby, 0) + 1);
           }
       }


       ArrayList<HashMap.Entry<String, Integer>> sortedMarriedHobbies = new ArrayList<>(marriedHobbies.entrySet());


       System.out.println("–¢–æ–ø 3 –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –¥–ª—è –æ–¥—Ä—É–∂–µ–Ω–∏—Ö:");
       for (int i = 0; i < Math.min(3, sortedMarriedHobbies.size()); i++) {
           HashMap.Entry<String, Integer> entry = sortedMarriedHobbies.get(i);
           System.out.println(entry.getKey() + " - " + entry.getValue());
       }


       ArrayList<HashMap.Entry<String, Integer>> sortedUnmarriedHobbies = new ArrayList<>(unmarriedHobbies.entrySet());


       System.out.println("–¢–æ–ø 3 –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –¥–ª—è –Ω–µ–æ–¥—Ä—É–∂–µ–Ω–∏—Ö:");
       for (int i = 0; i < Math.min(3, sortedUnmarriedHobbies.size()); i++) {
           HashMap.Entry<String, Integer> entry = sortedUnmarriedHobbies.get(i);
           System.out.println(entry.getKey() + " - " + entry.getValue());
       }
   }
}
